library(slidifyLibraries)
install.packages(c("dplyr", "jsonlite", "knitr", "tidyselect", "XML"))
rm(list = ls())
library(slidify)
install_version("stringr", version="0.6.2")
library(devtools)
install_version("stringr", version="0.6.2")
fixInNamespace("init_repo", "slidify")
rm(list = ls())
shiny::runApp('ShinyProjects/009Grid/TestGrid2/Tabs')
runApp()
runApp('ShinyProjects/009Grid/TestGrid2/Tabs')
runApp()
runApp('ShinyProjects/009Grid/TestGrid2/Tabs')
runApp()
runApp('ShinyProjects/009Grid/TestGrid2/Tabs')
unique(df.mel$Type)
c.option("All", unique(df.mel$Type))
c.option("All", unique(as.character(df.mel$Type)))
runApp('ShinyProjects/009Grid/TestGrid2/Tabs')
shiny::runApp('ShinyProjects/009Grid/TestGrid2/Tabs')
runApp('ShinyProjects/009Grid/TestGrid2/Tabs')
cut(df.mel$Price,
breaks = quantile(df.mel$Price))
quantile(df.mel$Price)
runApp('ShinyProjects/009Grid/TestGrid2/Tabs')
quantile(df.mel$Price)
runApp('ShinyProjects/009Grid/TestGrid2/Tabs')
library(slidify)
install.packages("C:/Users/pacor/Desktop/Paolo/slidify_0.3.1.zip", repos = NULL, type = "win.binary")
library(slidify)
getwd()
pkgs <- c('ramnathv/slidifyLibraries', 'ramnathv/slidify')
devtools::install_github(pkgs, force = TRUE)
shiny::runApp('ShinyProjects/009Grid/TestGrid2/Tabs')
library(plotly)
load("dfmel.Rdata")
l <- list(
x = 0.1,
y = 0.9,
font = list(
#family = "sans-serif",
size = 12,
color = "#000"),
bgcolor = "#E2E2E2",
bordercolor = "#FFFFFF",
orientation = 'v',
borderwidth = 1)
p <- plot_ly(df.mel, type = "scattermapbox") %>%
add_trace(lat = filter(df.mel, PriceCategory == "low")$Lattitude,
lon = filter(df.mel, PriceCategory == "low")$Longtitude,
# color = paste("<b>Low Price</b>","<br> < 660k"),
color = "Low Price",
marker = list(color = "darkgreen"),
hoverinfo = "text",
hovertext = filter(df.mel, PriceCategory == "low")$HoverText,
mode = "markers") %>%
add_trace(lat = filter(df.mel, PriceCategory == "medium low")$Lattitude,
lon = filter(df.mel, PriceCategory == "medium low")$Longtitude,
#color = paste("<b>Medium Low Price</b>", "<br> 660k - 910k"),
color = "Low Price",
marker = list(color = "green"),
hoverinfo = "text",
hovertext = filter(df.mel, PriceCategory == "medium low")$HoverText,
mode = "markers") %>%
add_trace(lat = filter(df.mel, PriceCategory == "medium high")$Lattitude,
lon = filter(df.mel, PriceCategory == "medium high")$Longtitude,
#color = paste("<b>Medium High Price</b>","<br> 910K - 1.33M"),
color = "Low Price",
marker = list(color = "orange"),
hovertext = filter(df.mel, PriceCategory == "medium high")$HoverText,
hoverinfo = "text",
mode = "markers")%>%
add_trace(lat = filter(df.mel, PriceCategory == "high")$Lattitude,
lon = filter(df.mel, PriceCategory == "high")$Longtitude,
#color = paste("<b>High Price</b>","<br> > 1.33M"),
color = "Low Price",
marker = list(color = "red"),
hovertext = filter(df.mel, PriceCategory == "high")$HoverText,
hoverinfo = "text",
mode = "markers")%>%
layout(
#showlegend = FALSE,
legend = l,
mapbox = list(
style = 'open-street-map',
zoom =9.5,
center = list(lon = mean(df.mel$Longtitude),
lat = mean(df.mel$Lattitude)))
)
p
hd <- highlight_key(df.mel, ~PriceCategory)
p <-  plot_ly(hd, type = "scattermapbox",
lat = ~Lattitude,
lon = ~Longtitude,
color = I("black"),
text = ~HoverText) %>%
add_trace(mode = "markers") %>%
layout(
#showlegend = FALSE,
legend = l,
mapbox = list(
style = 'open-street-map',
zoom =9.5,
center = list(lon = mean(df.mel$Longtitude),
lat = mean(df.mel$Lattitude)))
p
p <-  plot_ly(hd, type = "scattermapbox",
lat = ~Lattitude,
lon = ~Longtitude,
color = I("black"),
text = ~HoverText) %>%
add_trace(mode = "markers") %>%
layout(
#showlegend = FALSE,
legend = l,
mapbox = list(
style = 'open-street-map',
zoom =9.5,
center = list(lon = mean(df.mel$Longtitude),
lat = mean(df.mel$Lattitude))))
p
names(hd)
names(df.mel)
p <-  plot_ly(hd, type = "scattermapbox",
lat = ~Lattitude,
lon = ~Longtitude,
color = ~MarkerColor,
text = ~HoverText) %>%
add_trace(mode = "markers") %>%
layout(
#showlegend = FALSE,
legend = l,
mapbox = list(
style = 'open-street-map',
zoom =9.5,
center = list(lon = mean(df.mel$Longtitude),
lat = mean(df.mel$Lattitude))))
p
p <-  plot_ly(hd, type = "scattermapbox",
lat = ~Lattitude,
lon = ~Longtitude,
color = ~MarkerColor,
text = ~HoverText) %>%
add_trace(mode = "markers") %>%
layout(
#showlegend = FALSE,
#    legend = l,
mapbox = list(
style = 'open-street-map',
zoom =9.5,
center = list(lon = mean(df.mel$Longtitude),
lat = mean(df.mel$Lattitude))))
p
p <-  plot_ly(hd, type = "scattermapbox",
lat = ~Lattitude,
lon = ~Longtitude,
color = ~MarkerColor,
text = ~HoverText) %>%
#    add_trace(mode = "markers") %>%
layout(
#showlegend = FALSE,
#    legend = l,
mapbox = list(
style = 'open-street-map',
zoom =9.5,
center = list(lon = mean(df.mel$Longtitude),
lat = mean(df.mel$Lattitude))))
p
p <-  plot_ly(hd, type = "scattermapbox",
lat = ~Lattitude,
lon = ~Longtitude,
color = ~MarkerColor,
marker = ~PriceCategory,
text = ~HoverText) %>%
#    add_trace(mode = "markers") %>%
layout(
#showlegend = FALSE,
#    legend = l,
mapbox = list(
style = 'open-street-map',
zoom =9.5,
center = list(lon = mean(df.mel$Longtitude),
lat = mean(df.mel$Lattitude))))
p
hd <- highlight_key(df.mel, ~PriceCategory)
names(df.mel)
p <-  plot_ly(hd, type = "scattermapbox",
lat = ~Lattitude,
lon = ~Longtitude,
color = ~MarkerColor,
marker = list(color = "darkgreen"),
text = ~HoverText) %>%
#    add_trace(mode = "markers") %>%
layout(
#showlegend = FALSE,
#    legend = l,
mapbox = list(
style = 'open-street-map',
zoom =9.5,
center = list(lon = mean(df.mel$Longtitude),
lat = mean(df.mel$Lattitude))))
p
hd <- highlight_key(df.mel, ~PriceCategory)
names(df.mel)
p <-  plot_ly(hd, type = "scattermapbox",
lat = ~Lattitude,
lon = ~Longtitude,
color = ~PriceCategory,
#              marker = list(color = "darkgreen"),
text = ~HoverText) %>%
#    add_trace(mode = "markers") %>%
layout(
#showlegend = FALSE,
#    legend = l,
mapbox = list(
style = 'open-street-map',
zoom =9.5,
center = list(lon = mean(df.mel$Longtitude),
lat = mean(df.mel$Lattitude))))
p
p <-  plot_ly(hd, type = "scattermapbox",
lat = ~Lattitude,
lon = ~Longtitude,
color = ~PriceCategory,
marker = list(color = df.mel$MarkerColor),
text = ~HoverText) %>%
#    add_trace(mode = "markers") %>%
layout(
#showlegend = FALSE,
#    legend = l,
mapbox = list(
style = 'open-street-map',
zoom =9.5,
center = list(lon = mean(df.mel$Longtitude),
lat = mean(df.mel$Lattitude))))
p
r <- list(color = df.mel$MarkerColor)
r[1:5]
p <-  plot_ly(hd, type = "scattermapbox",
lat = ~Lattitude,
lon = ~Longtitude,
#color = ~PriceCategory,
marker = list(color = df.mel$MarkerColor),
text = ~HoverText) %>%
#    add_trace(mode = "markers") %>%
layout(
#showlegend = FALSE,
#    legend = l,
mapbox = list(
style = 'open-street-map',
zoom =9.5,
center = list(lon = mean(df.mel$Longtitude),
lat = mean(df.mel$Lattitude))))
p
hd <- highlight_key(df.mel, ~PriceCategory)
names(df.mel)
p <-  plot_ly(hd, type = "scattermapbox",
lat = ~Lattitude,
lon = ~Longtitude,
color = df.mel$PriceCategory,
marker = list(color = df.mel$MarkerColor),
text = ~HoverText) %>%
#    add_trace(mode = "markers") %>%
layout(
#showlegend = FALSE,
#    legend = l,
mapbox = list(
style = 'open-street-map',
zoom =9.5,
center = list(lon = mean(df.mel$Longtitude),
lat = mean(df.mel$Lattitude))))
p
p <-  plot_ly(hd, type = "scattermapbox",
lat = ~Lattitude,
lon = ~Longtitude,
color = ~PriceCategory,
marker = list(color = df.mel$MarkerColor),
text = ~HoverText) %>%
#    add_trace(mode = "markers") %>%
layout(
#showlegend = FALSE,
#    legend = l,
mapbox = list(
style = 'open-street-map',
zoom =9.5,
center = list(lon = mean(df.mel$Longtitude),
lat = mean(df.mel$Lattitude))))
p
p <-  plot_ly(hd, type = "scattermapbox",
lat = ~Lattitude,
lon = ~Longtitude,
color = ~PriceCategory,
#marker = list(color = df.mel$MarkerColor),
text = ~HoverText) %>%
add_trace(mode = "markers") %>%
layout(
#showlegend = FALSE,
#    legend = l,
mapbox = list(
style = 'open-street-map',
zoom =9.5,
center = list(lon = mean(df.mel$Longtitude),
lat = mean(df.mel$Lattitude))))
p
shiny::runApp('ShinyProjects/009Grid/TestGrid2/Tabs')
library(dplyr)
library(ggplot2)
library(plotly)
df.mel <- df.mel[which(!is.na(df.mel$Lattitude) &
!is.na(df.mel$Price) &
!is.na(df.mel$Bathroom)),]
min(df.mel$Price)
max(df.mel$Price)
runApp('ShinyProjects/009Grid/TestGrid2/Tabs')
df.mel$PriceCategory <-cut(df.mel$Price,
breaks = quantile(df.mel$Price),
labels = c("low", "medium low", "medium high", "high"))
runApp('ShinyProjects/009Grid/TestGrid2/Tabs')
a <- c(3, 4)
b <- 2.3
b %in% a
a <- c(3, 4)
b <- 3.3
b %in% a
inrange <- function(val, v.range)
{
if(val >= v.range[1] & val <= v.range[2])
return(TRUE)
else
return(FALSE)
}
in.range <- function(val, v.range)
{
if(val >= v.range[1] & val <= v.range[2])
return(TRUE)
else
return(FALSE)
}
in.range(3,c(1,5))
in.range(1,c(1,5))
in.range(0.9,c(1,5))
in.range(5.1,c(1,5))
in.range(5.0,c(1,5))
in.range(5.001,c(1,5))
runApp('ShinyProjects/009Grid/TestGrid2/Tabs')
runApp('ShinyProjects/009Grid/TestGrid1')
runApp('ShinyProjects/009Grid/TestGrid2/Tabs')
runApp('ShinyProjects/009Grid/TestGrid1')
library(dplyr)
library(ggplot2)
library(plotly)
# df.mel <- read.csv("./Tabs/Data/Melbourne_housing_FULL.csv")
df.mel <- read.csv("./Data/Melbourne_housing_FULL.csv")
df.mel <- df.mel[which(!is.na(df.mel$Lattitude) &
!is.na(df.mel$Price) &
!is.na(df.mel$Bathroom)),]
runApp('ShinyProjects/009Grid/TestGrid1')
nrow(df.mel)
nrow(df.mel[(df.mel$Price >= 1605000 & df.mel<= 4985000),])
nrow(df.mel[which(df.mel$Price >= 1605000 & df.mel<= 4985000),])
runApp('ShinyProjects/009Grid/TestGrid1')
in.range <- function(val, v1, v2)
{
if(val >= v1 & val <= v2)
return(TRUE)
else
return(FALSE)
}
nrow(df.mel[which(df.mel$Price >= 1605000 & df.mel<= 4985000),])
nrow(df.mel[which(df.mel$Price >= 1605000 & df.mel$Price<= 4985000),])
runApp('ShinyProjects/009Grid/TestGrid1')
nrow(df.mel[which(in.range(df.mel$Price, input$price[1], input$price[2])),])
nrow(df.mel[which(in.range(df.mel$Price, 1605000, 4985000)),])
nrow(df.mel[which(lapply(df.mel$Price, in.range)),])
?mapply
?sapply
?vapply
runApp('ShinyProjects/009Grid/TestGrid2/Tabs')
unique(df.mel$Regionname)
df.melPres <- df.mel[which(df.mel$Regionname == input$region &
df.mel$Rooms %in% rrooms &
df.mel$Bathroom %in% bbathrooms &
df.mel$Type %in% ttype),]
df.melPres <- df.mel[which(df.mel$Regionname == region &
df.mel$Rooms %in% rrooms &
df.mel$Bathroom %in% bbathrooms &
df.mel$Type %in% ttype),]
ttype <- "h"
rrooms <- "3"
bbathrooms <- "2"
region <- "Southern Metropolitan"
df.melPres <- df.mel[which(df.mel$Regionname == region &
df.mel$Rooms %in% rrooms &
df.mel$Bathroom %in% bbathrooms &
df.mel$Type %in% ttype),]
save(df.melPres, file = 'dfmelPres.Rdata')
df.mel <- df.mel[which(df.mel$Regionname == region &
df.mel$Rooms %in% rrooms &
df.mel$Bathroom %in% bbathrooms &
df.mel$Type %in% ttype),]
save(df.mel, file = 'dfmel.Rdata')
ttype <- "h"
rrooms <- "3"
bbathrooms <- "2"
region <- "Southern Metropolitan"
df.mel <- df.mel[which(df.mel$Regionname == region &
df.mel$Rooms %in% rrooms &
df.mel$Bathroom %in% bbathrooms &
df.mel$Type %in% ttype),]
save(df.mel, file = 'dfmel.Rdata')
load("dfmel.Rdata")
setwd('C:/Users/pacor/Desktop/Paolo/WIP/Coursera/09_Developing_Data_Products-master/GIT/Week4Assignment/Presentation/MelbourneHousePricesMap')
save(df.melPres, file = 'dfmelPres.Rdata')
load("dfmelPres.Rdata")
rm(list = ls())
setwd('C:/Users/pacor/Desktop/Paolo/WIP/Coursera/09_Developing_Data_Products-master/GIT/Week4Assignment/Presentation/MelbourneHousePricesMap')
getwd()
library(dplyr)
df.mel <- read.csv("./Data/Melbourne_housing_FULL.csv")
df.mel <- df.mel[which(!is.na(df.mel$Lattitude) &
!is.na(df.mel$Price) &
!is.na(df.mel$Bathroom)),]
# df1_FULL <- df1_FULL[which(!is.na(df1_FULL$Lattitude) &
#                                !is.na(df1_FULL$Price) &
#                                !is.na(df1_FULL$Bathroom)),]
df.mel$PriceCategory <-cut(df.mel$Price,
breaks = quantile(df.mel$Price),
labels = c("low", "medium low", "medium high", "high"))
df.mel$MarkerColor <-cut(df.mel$Price,
breaks = quantile(df.mel$Price),
labels = c("darkgreen", "green", "red", "darkred"))
residency.type <- function(ttype)
{
if (ttype == "h")
{
return("House Cottage Villa")
}else if (ttype == "u")
{
return("Unit Duplex")
}else
{
return("Town house")
}
df.mel$HoverText <- with(df.mel, paste('<b>Price:</b>', Price,
'<br>', "Council: ", CouncilArea,
'<br>', "Region: ", Regionname,
'<br>', "# Rooms: ", Rooms,  " # Bathrooms: ", Bathroom,
'<br>', "Type", lapply(Type,residency.type)))
ttype <- "h"
rrooms <- "3"
bbathrooms <- "2"
region <- "Southern Metropolitan"
df.mel <- df.mel[which(df.mel$Regionname == region &
df.mel$Rooms %in% rrooms &
df.mel$Bathroom %in% bbathrooms &
df.mel$Type %in% ttype),]
save(df.mel, file = 'dfmel.Rdata')
save(df.melPres, file = 'dfmelPres.Rdata')
df.melPres <- df.mel[which(df.mel$Regionname == region &
df.mel$Rooms %in% rrooms &
df.mel$Bathroom %in% bbathrooms &
df.mel$Type %in% ttype),]
save(df.mel, file = 'dfmel.Rdata')
save(df.melPres, file = 'dfmelPres.Rdata')
rm(list = ls())
load("dfmelPres.Rdata")
slidify::slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
load("dfmel.Rdata")
library(dplyr)
df.mel <- read.csv("./Data/Melbourne_housing_FULL.csv")
df.mel <- df.mel[which(!is.na(df.mel$Lattitude) &
!is.na(df.mel$Price) &
!is.na(df.mel$Bathroom)),]
# df1_FULL <- df1_FULL[which(!is.na(df1_FULL$Lattitude) &
#                                !is.na(df1_FULL$Price) &
#                                !is.na(df1_FULL$Bathroom)),]
df.mel$PriceCategory <-cut(df.mel$Price,
breaks = quantile(df.mel$Price),
labels = c("low", "medium low", "medium high", "high"))
df.mel$MarkerColor <-cut(df.mel$Price,
breaks = quantile(df.mel$Price),
labels = c("darkgreen", "green", "red", "darkred"))
df.mel$HoverText <- with(df.mel, paste('<b>Price:</b>', Price,
'<br>', "Council: ", CouncilArea,
'<br>', "Region: ", Regionname,
'<br>', "# Rooms: ", Rooms,  " # Bathrooms: ", Bathroom,
'<br>', "Type", lapply(Type,residency.type)))
residency.type <- function(ttype)
{
if (ttype == "h")
{
return("House Cottage Villa")
}else if (ttype == "u")
{
return("Unit Duplex")
}else
{
return("Town house")
}
df.mel$HoverText <- with(df.mel, paste('<b>Price:</b>', Price,
'<br>', "Council: ", CouncilArea,
'<br>', "Region: ", Regionname,
'<br>', "# Rooms: ", Rooms,  " # Bathrooms: ", Bathroom,
'<br>', "Type", lapply(Type,residency.type)))
ttype <- "h"
rrooms <- "3"
bbathrooms <- "2"
region <- "Southern Metropolitan"
save(df.mel, file = 'dfmel.Rdata')
